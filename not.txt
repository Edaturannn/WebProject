namespace WebAPI.Models;

public class Applicant
{
    public int Age { get; set; }
}



namespace WebAPI.Models;

public class JobApplication
{
    public Applicant Applicant { get; set; }

    public int YearsOfExperience { get; set; }

    public List<string> TechStackList { get; set; }
}




using WebAPI.Models;

namespace WebAPI;

public class ApplicationEvaluator
{
    private const int minAge = 18;
    private const int autoAcceptedYearOffExperience = 15;
    private List<string> techStackList = new() { "C#", "RabbitMQ", "Microservice", "Visual Studio" };
    public ApplicationResult Evaluate(JobApplication form)
    {
        if (form.Applicant.Age < minAge)
        {
            return ApplicationResult.AutoRejected;
        }
        var sr = GetTechStackSimilarityRate(form.TechStackList);

        if (sr < 25)
        {
            return ApplicationResult.AutoRejected;
        }

        if (sr > 75 && form.YearsOfExperience >= autoAcceptedYearOffExperience)
        {
            return ApplicationResult.AutoAccepted;
        }

        return ApplicationResult.AutoAccepted;
    }
    private int GetTechStackSimilarityRate(List<string> techStacks)
    {
        var matchedCount = techStackList.Where(i => techStacks.Contains(i, StringComparer.OrdinalIgnoreCase)).Count();

        return (int)((double)matchedCount / techStackList.Count * 100);
    }
}

public enum ApplicationResult
{
    AutoRejected,
    TransferredToHR,
    TransferredToLead,
    TransferredToCTO,
    AutoAccepted
}




using NUnit.Framework;

using WebAPI.Models;

namespace WebAPI.Tests;

public class ApplicationEvaluateUnitTest
{
    //UnitOfWork_Condition_ExpectedResult

    //Condition_Result
    [Test]
    public void Application_WithUnderAge_TransferredToAutoRejected()
    {
        //Arrange
        var evaluator = new ApplicationEvaluator();
        var form = new JobApplication()
        {
            Applicant = new Applicant()
            {
                Age = 17
            },

            TechStackList = new System.Collections.Generic.List<string>() { "" }
        };

        //Action
        var appResult = evaluator.Evaluate(form);

        //Assert
        Assert.That(appResult, Is.EqualTo(ApplicationResult.AutoRejected));
    }

    [Test]
    public void Application_WithNoTechStack_TransferredToAutoRejected()
    {
        //Arrange
        var evaluator = new ApplicationEvaluator();
        var form = new JobApplication()
        {
            Applicant = new Applicant()
            {
                Age = 17
            },

            TechStackList = new System.Collections.Generic.List<string>() { "" }
        };

        //Action
        var appResult = evaluator.Evaluate(form);

        //Assert
        Assert.That(appResult, Is.EqualTo(ApplicationResult.AutoRejected));
    }

    [Test]
    public void Application_WithNoTechOver75P_TransferredToAutoRejected()
    {
        //Arrange
        var evaluator = new ApplicationEvaluator();
        var form = new JobApplication()
        {
            Applicant = new Applicant()
            {
                Age = 22
            },

            TechStackList = new System.Collections.Generic.List<string>() { "C#", "RabbitMQ", "Microservice", "Visual Studio" },

            YearsOfExperience = 16
        };

        //Action
        var appResult = evaluator.Evaluate(form);

        //Assert
        Assert.That(appResult, Is.EqualTo(ApplicationResult.AutoAccepted));
    }
}


// dotnet test --filter "Test1" 

// dotnet test